#####################################################################
##                This code is written by Sujan Mamidi             ##
######   Rcode to obtain frequency distribution of selected   #######
########    sites based on type or delta. Finds a boostrap  #########
########        cutoff and graphs a manhattan plot          #########

########          This code is licensed under the           #########
########          GNU General Public License v3.0           #########

########                       Citation:                    #########
######## "Mamidi, Sujan, Phillip N. Miklas, Jennifer Trapp, #########
########  Erin Felicetti, Jane Grimwood, Jeremy Schmutz,    #########
########  Rian Lee, and Phillip E. McClean. Sequence-based  #########
########  introgression mapping identifies candidate white  #########
########       mold tolerance genes in common bean.         #########
########           The plant genome 9, (2) (2016)."         #########
#####################################################################




sliding_windows_frequency <- function(infile,window=10000, slide=2000, type=NULL, delta=NULL){
    
    ## Check if it has required criteria for subset
    if(is.null(type) && is.null(delta)) {
        stop("Specify either type or delta")
    }
    
    myData <- read.table(infile, header=FALSE)
    colnames(myData) <- c("Chr","pos","Ref","Var", "delta", "type")
    
    numslides <- window/slide
    
    ## make a subset based on site type
    if(!is.null(type)){
        if (type =="all") {myData <- myData}
        else if (type == "fixed") {myData <- subset(myData, myData$type == "fixed")}
        else if (type == "shared") {myData <- subset(myData, myData$type == "shared")}
        else if (type == "unique_pop1") {myData <- subset(myData, myData$type == "unique_pop1")}
        else if (type == "unique_pop2") {myData <- subset(myData, myData$type == "unique_pop2")}
    } else if (!is.null(delta) && is.numeric(delta)==TRUE) {
        myData <- subset(myData, MyData$Delta >= delta)
    }
    
    ## Create an empty dataframe
    Scount <- data.frame(Chrom=character(),
    S=integer(),
    Start_Mbp=integer(),
    End_Mbp=integer(),
    stringsAsFactors=FALSE)
  
    ## A loop to create multiple temporary df
    for (i in 1:numslides){
        
        myData$region <- floor((myData$pos-((i-1)*slide))/window)
        newdf <- aggregate(myData$pos ~ myData$Chr+myData$region, data=myData, FUN=length)
        
        colnames(newdf) <- c("Chrom","region","S")
        newdf$Start_Mbp <- ((newdf$region * window) + ((i-1)*slide))/1000000
        newdf$End_Mbp <- newdf$Start_Mbp + (window/1000000)
        newdf$region <- NULL
        myData$region <- NULL
        
        Scount<-rbind(Scount, newdf)
        rm(newdf)
    }
    
    ## Edit/Format the final dataset
    Scount <- Scount[which(Scount$Start_Mbp >= 0),]
    Scount <- Scount[order(Scount$Chr, Scount$Start_Mbp),]
    Scount <- Scount[c("Chrom", "Start_Mbp", "End_Mbp", "S")]
    
    ## write and outfile
    outfile <- paste(infile,window, slide,"freq_dist.txt", sep = "_")
    
    write.table(Scount,outfile, quote = FALSE, sep = " ", col.names = TRUE, row.names = FALSE)
    
}

############################################################################
##### This function calculates multiple cutoffs from a distribution ########
############################################################################

quantile_cutoffs <- function(x, probs, na.rm =T,names = F, type = 7,myname){
    z <- quantile(x, probs, na.rm, names, type)
    return(data.frame(id = probs, values = z,variable=myname))
}

